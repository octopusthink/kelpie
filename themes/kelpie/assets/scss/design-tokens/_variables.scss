/*
 * Colour palettes
 *
 * We try to use colour in a semantic and predicatable way, 
 * so we start by defining a palette of colours here, and then
 * we apply those colours to specific use cases.
 *
 * As a general rule, try to avoid calling the colours directly, 
 * and instead use the semantic colour variables defined below.
 */
$palette: (
    // Neutrals
    "neutral": (
        "white": #fff,
        "off-white": #f8f9fa,
        "grey100": #ebedf0,
        "grey200": #dee0e5,
        "grey300": #cfd3da,
        "grey400": #bec4cd,
        "grey500": #acb3bf,
        "grey600": #97a0af,
        "grey700": #818996,
        "grey800": #666c76,
        "grey900": #3b3f45,
        "black": #181b1c,
    ),

    // Accent or brand colours.
    // May also require a "text" value (for brighter links) and an "inverse" value, depending on how colour is used in the theme.
    "primary": (
        "white": #fcebf4,
        "light": #f19dca,
        "default": #e33592,
        "dark": #b32973,
        "black": #6a1844,
    ),

    "secondary": (
        "white": #e2f5f6,
        "light": #76d0d6,
        "default": #00a8b4,
        "dark": #00858e,
        "black": #004f54,
    ),
);

/*
 * Colours
 *
 * We define a number of semantic colour variables here to apply colours 
 * in a predictable way. When applying colours to elements, try to use these
 * variables!
 */
$colors: (
    // Colours of layout elements.
    "layout": (
        "content-background": get($palette, "neutral", "off-white"),
        "header-background": get($palette, "neutral", "black"),
        "footer-background": get($palette, "neutral", "black"),
    ),

    // Colours used for text.
    "text": (
        "default": get($palette, "neutral", "grey800"),
        "dark": get($palette, "neutral", "black"),
        "light": get($palette, "neutral", "grey600"),
        "inverse": get($palette, "neutral", "grey200"),
        "inverse-dark": get($palette, "neutral", "grey400"),
        "inverse-light": get($palette, "neutral", "white"),
    ), 

    // Colours for interactive elements (buttons, links).
    "interactive": (
        "background": get($palette, "primary", "dark"),
        "border": get($palette, "primary", "default"),
        "text": get($palette, "primary", "default"),
        "focus": get($palette, "primary", "light"),
        "hover": get($palette, "secondary", "default"),
    )
);

/* Spacing
 *
 * We use an 8px grid and size spacing based on 10rem = 1px.
 * This allows spacing to scale with font size whilst maintaining readability. 
 * Try to use only the spacing units below for margins and padding.
 */
$spacing: (
    "hairline": 0.4rem, // 4px, usually equivalent to whitespace in text.
    "xxs": 0.8rem, // 8px
    "xs": 1.6rem, // 16px
    "s": 2.4rem, // 24px
    "m": 3.2rem, // 32px
    "l": 4.8rem, // 48px
    "xl": 6.4rem, // 64px
    "xxl": 12.8rem // 128px
);

/* Site structure
 *
 * These are site-wide variables that determine 
 * how elements are sized & within the available viewport space.
 */
 $site: (
    "expanded-menu-breakpoint": 640px, // At this point, we show a full menu.
    "max-site-width": 160rem, // 1600px. Beyond this, we'll block out the edges of the screen.
    // If you need to change this width, also be sure to change set_post_thumbnail_size in functions.php
    "max-content-width": 56rem, // 560px. Used for content and Gutenberg blocks.
    "padding": 1.6rem, // 16px, used to determine the minimum padding around the whole site content.
);

/* Typography 
 *
 * These variables determine how typography is applied across the site.
 * Several "styles" are configurable here to apply typographic treatments
 * to elements based on their semantic intention. (ie, headings, links, etc.)
 * See design-tokens/typography.scss for full implementation.
 * The easiest way to use this is to determine a base size and a scale modifier,
 * and Kelpie will generate a type scale to use, but these values can also be
 * overridden as needed. 
 */
$typescale-base: 1.6rem; // Base font size. 1rem = 10px, so 1.6rem = 16px.
$typescale-modifier: 1.25; // Scale modifier to determine steps in type scale. use a larger value for more contrast, and a smaller value for less contrast.

$typography: (
    "body":  (
        font-family: (-apple-system, BlinkMacSystemFont, "Segoe UI",Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif),
        font-style: normal,
        line-height: 1.6,
        letter-spacing: 0,
        color: get($colors, "text", "default"),
        weight: 400,
    ),
    "headings":  (
        font-family: (-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif),
        font-style: normal,
        line-height: 1.2,
        letter-spacing: -0.025em,
        color: get($colors, "text", "default"),
        weight: 600,
        case: normal,
    ),
    "titles":  (
        font-family: (-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif),
        font-style: normal,
        line-height: 1,
        letter-spacing: -0.05em,
        color: get($colors, "text", "dark"),
        weight: 800,
        case: normal,
    ),
    "subtitles":  (
        font-family: (-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif),
        font-style: normal,
        line-height: 1.2,
        letter-spacing: -0.015em,
        color: get($colors, "text", "light"),
        weight: 400,
        case: normal,
    ),
    "interface":  (
        font-family: (-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif),
        font-style: normal,
        line-height: 1.2,
        letter-spacing: -0.015em,
        color: get($colors, "text", "default"),
        weight: 500,
        case: normal,
    ),
    "sizes": (
        "xs": ($typescale-base / $typescale-modifier / $typescale-modifier),
        "s": ($typescale-base / $typescale-modifier),
        "base": $typescale-base,
        "m": ($typescale-base * $typescale-modifier),
        "l": ($typescale-base * $typescale-modifier * $typescale-modifier),
        "xl": ($typescale-base * $typescale-modifier * $typescale-modifier * $typescale-modifier),
        "xxl": ($typescale-base * $typescale-modifier * $typescale-modifier * $typescale-modifier * $typescale-modifier),
        "xxxl": ($typescale-base * $typescale-modifier * $typescale-modifier * $typescale-modifier * $typescale-modifier * $typescale-modifier),
        "xxxxl": ($typescale-base * $typescale-modifier * $typescale-modifier * $typescale-modifier * $typescale-modifier * $typescale-modifier * $typescale-modifier),
	),
);
