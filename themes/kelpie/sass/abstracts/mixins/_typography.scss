// Apply type styles to elements using this mixin.
@mixin typography($class: body, $size: m) {
	@include font-size($class, $size);
	font-family: get($typography, $class, 'font-family');
	font-style: get($typography, $class, 'font-style');
	font-weight: get($typography, $class, 'weight');
	letter-spacing: get($typography, $class, 'letter-spacing');
	line-height: get($typography, $class, 'line-height');
	text-transform: get($typography, $class, 'text-transform');
}

// Generate font size and line-height.
@mixin font-size($class: body, $size: m) {
	@if $class == body and $size == s {
		@include responsive-font-size('s');
	}
	@if $class == body and $size == m {
		@include responsive-font-size('base');
	}
	@if $class == body and $size == l {
		@include responsive-font-size('m');
	}
	@if $class == headings and $size == s {
		@include responsive-font-size('xl');
	}
	@if $class == headings and $size == m {
		@include responsive-font-size('xxl');
	}
	@if $class == headings and $size == l {
		@include responsive-font-size('xxxl');
	}
	@if $class == titles {
		@include responsive-font-size('xxxxl');
	}
	@if $class == subtitles and $size == s {
		@include responsive-font-size('m');
	}
	@if $class == subtitles and $size == l {
		@include responsive-font-size('l');
	}
	@if $class == interface and $size == s {
		@include responsive-font-size('s');
	}
	@if $class == interface and $size == m {
		@include responsive-font-size('base');
	}
	@if $class == interface and $size == l {
		@include responsive-font-size('m');
	}
	@if $class == metadata and $size == s {
		@include responsive-font-size('xs');
	}
	@if $class == metadata and $size == m {
		@include responsive-font-size('s');
	}
	@if $class == metadata and $size == l {
		@include responsive-font-size('m');
	}
}

// Output font sizes for the breakpoint we're using.
@mixin responsive-font-size($size) {
	font-size: get($typography, 'scale-mobile', $size);

	@include media('tablet-small') {
		font-size: get($typography, 'scale-desktop', $size);
	}
}

// The editor context is weird, and sizing fonts in rems doesn't work as expected, so we use ems instead, and convert the numbers.
@mixin responsive-font-size-editor($size) {
	font-size: rems-to-pixels(get($typography, 'scale-mobile', $size));

	@include media('tablet-small') {
		font-size: rems-to-pixels(get($typography, 'scale-desktop', $size));
	}
}
@mixin font-size-editor($class: body, $size: m) {
	@if $class == body and $size == m {
		@include responsive-font-size-editor('base');
	}
	@if $class == body and $size == s {
		@include responsive-font-size-editor('s');
	}
	@if $class == body and $size == l {
		@include responsive-font-size-editor('m');
	}
	@if $class == headings and $size == s {
		@include responsive-font-size-editor('xl');
	}
	@if $class == headings and $size == m {
		@include responsive-font-size-editor('xxl');
	}
	@if $class == headings and $size == l {
		@include responsive-font-size-editor('xxxl');
	}
	@if $class == titles {
		@include responsive-font-size-editor('xxxxl');
	}
	@if $class == subtitles and $size == s {
		@include responsive-font-size-editor('m');
	}
	@if $class == subtitles and $size == l {
		@include responsive-font-size-editor('l');
	}
	@if $class == interface and $size == s {
		@include responsive-font-size-editor('s');
	}
	@if $class == interface and $size == m {
		@include responsive-font-size-editor('base');
	}
	@if $class == interface and $size == l {
		@include responsive-font-size-editor('m');
	}
	@if $class == metadata and $size == s {
		@include responsive-font-size-editor('xs');
	}
	@if $class == metadata and $size == m {
		@include responsive-font-size-editor('s');
	}
	@if $class == metadata and $size == l {
		@include responsive-font-size-editor('m');
	}
}
